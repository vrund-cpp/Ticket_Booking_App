generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  adult
  kid
  school
}

enum VehicleType {
  two_wheeler
  four_wheeler
  school_bus
}

enum Format {
  D2
  D3
}

enum BookingItemType {
  entry_ticket
  parking
  attraction
  movie
}

enum BookingStatus {
  pending
  paid
  failed
  cancelled
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  mobile        String         @unique
  userType      UserType?
  verified      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt 

  notifications Notification[]
  bookings      Booking[]
}

model OTPRequest {
  id         String   @id @default(uuid())
  identifier String
  hashedOtp  String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  isRead    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Booking {
  id         String         @id @default(uuid())
  userId     String
  totalPrice Float          @default(0.0)
  status BookingStatus @default(pending)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  user       User           @relation(fields: [userId], references: [id])
  items      BookingItem[]
  payment Payment?
}

model BookingItem {
  id             String          @id @default(uuid())
  bookingId      String
  type           BookingItemType
  quantity       Int
  pricePerUnit   Float

  entryTicketId  String?
  parkingId      String?
  attractionId   Int?
  movieId        Int?

  booking        Booking         @relation(fields: [bookingId], references: [id])
  entryTicket    EntryTicket?    @relation(fields: [entryTicketId], references: [id])
  parkingOption  ParkingOption?  @relation(fields: [parkingId], references: [id])
  attraction     Attraction?     @relation(fields: [attractionId], references: [id])
  movie          Movie?          @relation(fields: [movieId], references: [id])
}

model EntryTicket {
  id          String       @id @default(uuid())
  name        String
  description String?
  price       Float
  slotCount   Int     @default(0)
  iconUrl     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  items       BookingItem[]
}

model ParkingOption {
  id          String      @id @default(uuid())
  vehicleType VehicleType
  description String?
  price       Float
  slotCount   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  items       BookingItem[]
}

model Attraction {
  id          Int      @id @default(autoincrement())
  title       String?
  description String      @default("No description available.")
  imageUrl    String?
  priceAdult   Float      @default(0.0)
  priceKid     Float      @default(0.0)
  priceSchool  Float      @default(0.0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  items       BookingItem[]
}

model Movie {
  id           Int      @id @default(autoincrement())
  title        String
  description  String       @default("No description available.")
  imageUrl     String
  releaseDate  DateTime?
  timeSlot     String?
  duration     Int          @default(0)
  format       Format?
  language     String?
  priceAdult   Float        @default(0.0)
  priceKid     Float        @default(0.0)
  priceSchool  Float        @default(0.0)
  createdAt    DateTime     @default(now())

  items        BookingItem[]
}

model Outreach {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  imageUrl    String
  Startdate   DateTime?
  Enddate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt 
}

model News {
  id          Int      @id @default(autoincrement())
  summary     String?
  date        DateTime?      @default(now())
  createdAt   DateTime @default(now())
}

model Payment {
id String @id @default(uuid())
userId  String
bookingId String @unique
amount Float
status String // success / failed
method String? // card, netbanking, upi
transactionId String? 
createdAt DateTime @default(now())

booking Booking @relation(fields: [bookingId], references: [id])
}
